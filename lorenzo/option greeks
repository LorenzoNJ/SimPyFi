#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Mon Apr 20 08:59:26 2020

@author: Lorenzo
"""

import numpy as np
from scipy.stats import norm
import matplotlib.pyplot as p


def pricing_call_BS (S,K,T,r,sig):
    d1 = (np.log(S/K) + (r+0.5*(sig**2))*T)/sig*np.sqrt(T)
    d2 = d1 - sig*np.sqrt(T)
    
    Nd1 = norm.cdf(d1)
    Nd2 = norm.cdf(d2)
    ert = np.exp(-r*T)
    price = S*Nd1 - K*ert*Nd2
    return price

def delta_call (S,K,T,r,sig):
    #d1 = (np.log(S/K) + (r+0.5*(sig**2))*T)/sig*np.sqrt(T)
    deltacall= norm.cdf((np.log(S/K) + (r+0.5*(sig**2))*T)/sig*np.sqrt(T))  
    p.plot(deltacall)
    
def delta_put(S,K,T,r,sig) :
    d1 = (np.log(S/K) + (r+0.5*(sig**2))*T)/sig*np.sqrt(T)
    deltaput = -norm.cdf(-d1)
    p.plot(deltaput)

def gamma_call (S,K,T,r,sig):
    gamma = norm.pdf((np.log(S/K) + (r+0.5*(sig**2))*T)/sig*np.sqrt(T))/S*sig*np.sqrt(T)
    p.plot(gamma)

S = np.zeros ([300])
i = 0

while i<300:
    S[i]= i+1 
    i = i+1
K = 150
T = 0.9
r = 0.05
sig = 0.20

delta_call(S,K,T,r,sig)
delta_put(S,K,T,r,sig)
gamma_call (S,K,T,r,sig)


test = pricing_call_BS (S,K,T,r,sig)



